datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bets Bet[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Competition {
  id    String          @id @default(cuid())
  name  String
  logo  String
  type  CompetitionType @default(SPORTS)
  bets  String[]
  Event Event[]
}

enum CompetitionType {
  SPORTS
  E_SPORTS
  CASINO
}

model Event {
  id            String       @id @default(cuid())
  competitionId String
  competition   Competition  @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  odds          Int[]
  Competitor   Competitor[]
  Bet           Bet[]
}

model Competitor {
  id      String  @id @default(cuid())
  name    String
  country String
  logo    String
  Event  Event[]
}

// model CompetitorsInEvent {
//   event        Event      @relation(fields: [evenId], references: [id], onDelete: Cascade)
//   evenId       String     @map("event_id")
//   competitor   Competitor @relation(fields: [competitorId], references: [id], onDelete: Cascade)
//   competitorId String     @map("competitor_id")

//   @@id([evenId, competitorId])
// }

model Bet {
  id       String @id @default(cuid())
  bettor   User   @relation(fields: [bettorId], references: [id], onDelete: Cascade)
  bettorId String
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  String
  money    Int
}
